PS C:\FPC\c_activity_sets\set03> gcc problem08.c -O0 -g
PS C:\FPC\c_activity_sets\set03> gdb a.exe
GNU gdb (GDB) 7.6.1
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.        
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "mingw32".      
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>... 
Reading symbols from C:\FPC\c_activity_sets\set03\a.exe...done.
(gdb) l 
18      Point input_point(char *promt_msg);
19      int input_polygon(Polygon *p);
20      float find_distance(Point a, Point b);
21      void find_perimeter(Polygon *p);
22      void output(Polygon p);
23
24      int main()
25      {
26          Polygon poly;
27          input_polygon(&poly);
(gdb) b main
Breakpoint 1 at 0x401474: file problem08.c, line 27.
(gdb) r
Starting program: C:\FPC\c_activity_sets\set03/a.exe 
[New Thread 7352.0x2868]
[New Thread 7352.0x2464]

Breakpoint 1, main () at problem08.c:27
27          input_polygon(&poly);
(gdb) n
Enter the number of sides of the polygon: 4
Enter the coordinates of the vertices of the polygon: Point 1: 
(x,y):

0 0
Point 2: 
(x,y):

0 1
Point 3: 
(x,y):

1 0
Point 4: 
(x,y):

1 1 
28          find_perimeter(&poly);
(gdb) step
find_perimeter (p=0x61fbe8) at problem08.c:78
78          float perimeter = 0.0;
(gdb) n
79          for (int i = 0; i < p->sides; i++)
(gdb) n
81              perimeter = perimeter + find_distance(p->p[i], p->p[i + 1 % p->sides]);
(gdb) n
79          for (int i = 0; i < p->sides; i++)
(gdb) n
81              perimeter = perimeter + find_distance(p->p[i], p->p[i + 1 % p->sides]);
(gdb) n

